# FUNCTIONS {{{
# SET PROXY ON OR OFF{{{
function proxyon() {
    #read  -p "Input IITK username: " username
    #read -s -p "Input IITK password: " password
    #gsettings set org.gnome.system.proxy.http authentication-user $username
    #gsettings set org.gnome.system.proxy.http authentication-password $password
    if [[ $1 == -i ]]; then
      gsettings set org.gnome.system.proxy mode 'manual'
      gsettings set org.gnome.system.proxy.http host 'ironport2.iitk.ac.in'
      gsettings set org.gnome.system.proxy.https host 'ironport2.iitk.ac.in'
      gsettings set org.gnome.system.proxy ignore-hosts "['localhost', '127.0.0.0/8', '::1']"
      echo "Proxy to ironport2.iitk.ac.in is set."
    else
      gsettings set org.gnome.system.proxy mode 'manual'
      gsettings set org.gnome.system.proxy.http host 'vsnlproxy.iitk.ac.in'
      gsettings set org.gnome.system.proxy.https host 'vsnlproxy.iitk.ac.in'
      gsettings set org.gnome.system.proxy.https port 3128
      gsettings set org.gnome.system.proxy ignore-hosts "['localhost', '127.0.0.0/8', '::1', '*.iitk.ac.in', '172.*.*.*','iitk.ac.in']"
      echo "Proxy to vsnlproxy.iitk.ac.in is set."
    fi
      gsettings set org.gnome.system.proxy.http port 3128
      gsettings set org.gnome.system.proxy.https port 3128
#    gsettings set org.gnome.system.proxy.ftp host '10.0.0.1'
#    gsettings set org.gnome.system.proxy.ftp port 8080
}

function proxyoff() {
     gsettings set org.gnome.system.proxy mode 'none'
#     gsettings set org.gnome.system.proxy.http authentication-user ''
#     gsettings set org.gnome.system.proxy.http authentication-password ''
     echo "Proxy disabled."
}
#}}}

# BETTER GIT COMMANDS {{{
bit() {
  # By helmuthdu
  usage(){
    echo "Usage: $0 [options]"
    echo "  --init                                              # Autoconfigure git options"
    echo "  a, [add] <files> [--all]                            # Add git files"
    echo "  c, [commit] <text> [--undo]                         # Add git files"
    echo "  C, [cherry-pick] <number> <url> [branch]            # Cherry-pick commit"
    echo "  b, [branch] feature|hotfix|<name>                   # Add/Change Branch"
    echo "  d, [delete] <branch>                                # Delete Branch"
    echo "  l, [log]                                            # Display Log"
    echo "  m, [merge] feature|hotfix|<name> <commit>|<version> # Merge branches"
    echo "  p, [push] <branch>                                  # Push files"
    echo "  P, [pull] <branch> [--foce]                         # Pull files"
    echo "  r, [release]                                        # Merge unstable branch on master"
    return 1
  }
  case $1 in
    --init)
      local NAME=`git config --global user.name`
      local EMAIL=`git config --global user.email`
      local USER=`git config --global github.user`
      local EDITOR=`git config --global core.editor`

      [[ -z $NAME ]] && read -p "Nome: " NAME
      [[ -z $EMAIL ]] && read -p "Email: " EMAIL
      [[ -z $USER ]] && read -p "Username: " USER
      [[ -z $EDITOR ]] && read -p "Editor: " EDITOR

      git config --global user.name $NAME
      git config --global user.email $EMAIL
      git config --global github.user $USER
      git config --global color.ui true
      git config --global color.status auto
      git config --global color.branch auto
      git config --global color.diff auto
      git config --global diff.color true
      git config --global core.filemode true
      git config --global push.default matching
      git config --global core.editor $EDITOR
      git config --global format.signoff true
      git config --global alias.reset 'reset --soft HEAD^'
      git config --global alias.graph 'log --graph --oneline --decorate'
      git config --global alias.compare 'difftool --dir-diff HEAD^ HEAD'
      if which meld &>/dev/null; then
        git config --global diff.guitool meld
        git config --global merge.tool meld
      elif which kdiff3 &>/dev/null; then
        git config --global diff.guitool kdiff3
        git config --global merge.tool kdiff3
      fi
      git config --global --list
      ;;
    a | add)
      if [[ $2 == --all ]]; then
        git add -A
      else
        git add $2
      fi
      ;;
    b | branch )
      check_branch=`git branch | grep $2`
      case $2 in
        feature)
          check_unstable_branch=`git branch | grep unstable`
          if [[ -z $check_unstable_branch ]]; then
            echo "creating unstable branch..."
            git branch unstable
            git push origin unstable
          fi
          git checkout -b feature --track origin/unstable
          ;;
        hotfix)
          git checkout -b hotfix master
          ;;
        master)
          git checkout master
          ;;
        *)
          check_branch=`git branch | grep $2`
          if [[ -z $check_unstable_branch ]]; then
            echo "creating $2 branch..."
            git branch $2
            git push origin $2
          fi
          git checkout $2
          ;;
      esac
      ;;
    c | commit )
      if [[ $2 == --undo ]]; then
        git reset --soft HEAD^
      else
        git commit -am "$2"
      fi
      ;;
    C | cherry-pick )
      git checkout -b patch master
      git pull $2 $3
      git checkout master
      git cherry-pick $1
      git log
      git branch -D patch
      ;;
    d | delete)
      check_branch=`git branch | grep $2`
      if [[ -z $check_branch ]]; then
        echo "No branch founded."
      else
        git branch -D $2
        git push origin --delete $2
      fi
      ;;
    l | log )
      git log --graph --oneline --decorate
      ;;
    m | merge )
      check_branch=`git branch | grep $2`
      case $2 in
        --fix)
          git mergetool
          ;;
        feature)
          if [[ -n $check_branch ]]; then
            git checkout unstable
            git difftool -g -d unstable..feature
            git merge --no-ff feature
            git branch -d feature
            git commit -am "${3}"
          else
            echo "No unstable branch founded."
          fi
          ;;
        hotfix)
          if [[ -n $check_branch ]]; then
            # get upstream branch
            git checkout -b unstable origin
            git merge --no-ff hotfix
            git commit -am "hotfix: v${3}"
            # get master branch
            git checkout -b master origin
            git merge hotfix
            git commit -am "Hotfix: v${3}"
            git branch -d hotfix
            git tag -a $3 -m "Release: v${3}"
            git push --tags
          else
            echo "No hotfix branch founded."
          fi
          ;;
        *)
          if [[ -n $check_branch ]]; then
            git checkout -b master origin
            git difftool -g -d master..$2
            git merge --no-ff $2
            git branch -d $2
            git commit -am "${3}"
          else
            echo "No unstable branch founded."
          fi
          ;;
      esac
      ;;
    p | push )
      git push origin $2
      ;;
    P | pull )
      if [[ $2 == --force ]]; then
        git fetch --all
        git reset --hard origin/master
      else
        git pull origin $2
      fi
      ;;
    r | release )
      git checkout origin/master
      git merge --no-ff origin/unstable
      git branch -d unstable
      git tag -a $2 -m "Release: v${2}"
      git push --tags
      ;;
    *)
      usage
  esac
}
#}}}

# TOP 11 COMMANDS {{{
top10() { history | awk '{a[$2]++ } END{for(i in a){print a[i] " " i}}' | sort -rn | head; }
#}}}

# UP {{{
# Goes up many dirs as the number passed as argument, if none goes up by 1 by default
up() {
  local d=""
  limit=$1
  for ((i=1 ; i <= limit ; i++)); do
    d=$d/..
  done
  d=$(echo $d | sed 's/^\///')
  if [[ -z "$d" ]]; then
    d=..
  fi
  cd $d
}
#}}}

# ARCHIVE EXTRACTOR {{{
extract() {
  clrstart="\033[1;34m"  #color codes
  clrend="\033[0m"

  if [[ "$#" -lt 1 ]]; then
    echo -e "${clrstart}Pass a filename. Optionally a destination folder. You can also append a v for verbose output.${clrend}"
    exit 1 #not enough args
  fi

  if [[ ! -e "$1" ]]; then
    echo -e "${clrstart}File does not exist!${clrend}"
    exit 2 #file not found
  fi

  if [[ -z "$2" ]]; then
    DESTDIR="." #set destdir to current dir
  elif [[ ! -d "$2" ]]; then
    echo -e -n "${clrstart}Destination folder doesn't exist or isnt a directory. Create? (y/n): ${clrend}"
    read response
    #echo -e "\n"
    if [[ $response == y || $response == Y ]]; then
      mkdir -p "$2"
      if [ $? -eq 0 ]; then
        DESTDIR="$2"
      else
        exit 6 #Write perms error
      fi
    else
      echo -e "${clrstart}Closing.${clrend}"; exit 3 # n/wrong response
    fi
  else
    DESTDIR="$2"
  fi

  if [[ ! -z "$3" ]]; then
    if [[ "$3" != "v" ]]; then
      echo -e "${clrstart}Wrong argument $3 !${clrend}"
      exit 4 #wrong arg 3
    fi
  fi

  filename=`basename "$1"`

  #echo "${filename##*.}" debug

  case "${filename##*.}" in
    tar)
      echo -e "${clrstart}Extracting $1 to $DESTDIR: (uncompressed tar)${clrend}"
      tar x${3}f "$1" -C "$DESTDIR"
      ;;
    gz)
      echo -e "${clrstart}Extracting $1 to $DESTDIR: (gip compressed tar)${clrend}"
      tar x${3}fz "$1" -C "$DESTDIR"
      ;;
    tgz)
      echo -e "${clrstart}Extracting $1 to $DESTDIR: (gip compressed tar)${clrend}"
      tar x${3}fz "$1" -C "$DESTDIR"
      ;;
    xz)
      echo -e "${clrstart}Extracting  $1 to $DESTDIR: (gip compressed tar)${clrend}"
      tar x${3}f -J "$1" -C "$DESTDIR"
      ;;
    bz2)
      echo -e "${clrstart}Extracting $1 to $DESTDIR: (bzip compressed tar)${clrend}"
      tar x${3}fj "$1" -C "$DESTDIR"
      ;;
    zip)
      echo -e "${clrstart}Extracting $1 to $DESTDIR: (zipp compressed file)${clrend}"
      unzip "$1" -d "$DESTDIR"
      ;;
    rar)
      echo -e "${clrstart}Extracting $1 to $DESTDIR: (rar compressed file)${clrend}"
      unrar x "$1" "$DESTDIR"
      ;;
    7z)
      echo -e  "${clrstart}Extracting $1 to $DESTDIR: (7zip compressed file)${clrend}"
      7za e "$1" -o"$DESTDIR"
      ;;
    *)
      echo -e "${clrstart}Unknown archieve format!"
      exit 5
      ;;
  esac
}
#}}}

# ARCHIVE COMPRESS {{{
compress() {
  if [[ -n "$1" ]]; then
    FILE=$1
    case $FILE in
      *.tar ) shift && tar cf $FILE $* ;;
      *.tar.bz2 ) shift && tar cjf $FILE $* ;;
      *.tar.gz ) shift && tar czf $FILE $* ;;
      *.tgz ) shift && tar czf $FILE $* ;;
      *.zip ) shift && zip $FILE $* ;;
      *.rar ) shift && rar $FILE $* ;;
    esac
  else
    echo "usage: compress <foo.tar.gz> ./foo ./bar"
  fi
}
#}}}

# CONVERT TO ISO {{{
to_iso () {
  if [[ $# == 0 || $1 == "--help" || $1 == "-h" ]]; then
    echo -e "Converts raw, bin, cue, ccd, img, mdf, nrg cd/dvd image files to ISO image file.\nUsage: to_iso file1 file2..."
  fi
  for i in $*; do
    if [[ ! -f "$i" ]]; then
      echo "'$i' is not a valid file; jumping it"
    else
      echo -n "converting $i..."
      OUT=`echo $i | cut -d '.' -f 1`
      case $i in
        *.raw ) bchunk -v $i $OUT.iso;; #raw=bin #*.cue #*.bin
        *.bin|*.cue ) bin2iso $i $OUT.iso;;
        *.ccd|*.img ) ccd2iso $i $OUT.iso;; #Clone CD images
        *.mdf ) mdf2iso $i $OUT.iso;; #Alcohol images
        *.nrg ) nrg2iso $i $OUT.iso;; #nero images
        * ) echo "to_iso don't know de extension of '$i'";;
      esac
      if [[ $? != 0 ]]; then
        echo -e "${R}ERROR!${W}"
      else
        echo -e "${G}done!${W}"
      fi
    fi
  done
}
#}}}

# REMIND ME, ITS IMPORTANT! {{{
# usage: remindme <time> <text>
# e.g.: remindme 10m "omg, the pizza"
remindme() {
  if [[ "$#" -lt 2 ]]; then
    echo -e "Usage: remindme [time] '[message]'"
    echo -e "Example: remindme 50s 'check mail'"
    echo -e "Example: remindme 10m 'go to class'"
    #exit 0 #not enough args
  fi
  if [[ "$#" -gt 2 ]]; then
    echo -e "Usage: remindme [time] '[message]'"
    echo -e "Example: remindme 50s 'check mail'"
    echo -e "Example: remindme 10m 'go to class'"
    #exit 0 #more than enough args
  fi
  if  [[ "$#" == 2 ]]; then
    sleep $1 && notify-send -t 15000 "$2" & echo 'Reminder set'
  fi
  }

#}}}

# SIMPLE CALCULATOR #{{{
# usage: calc <equation>
calc() {
  if which bc &>/dev/null; then
    echo "scale=3; $*" | bc -l
  else
    awk "BEGIN { print $* }"
  fi
}
#}}}

# FILE & STRINGS RELATED FUNCTIONS {{{

## FIND A FILE WITH A PATTERN IN NAME {{{
ff() { find . -type f -iname '*'$*'*' -ls ; }
#}}}

## FIND A FILE WITH PATTERN $1 IN NAME AND EXECUTE $2 ON IT {{{
fe() { find . -type f -iname '*'$1'*' -exec "${2:-file}" {} \;  ; }
#}}}

## MOVE FILENAMES TO LOWERCASE {{{
lowercase() {
  for file ; do
    filename=${file##*/}
    case "$filename" in
      */* ) dirname==${file%/*} ;;
      * ) dirname=.;;
    esac
    nf=$(echo $filename | tr A-Z a-z)
    newname="${dirname}/${nf}"
    if [[ "$nf" != "$filename" ]]; then
      mv "$file" "$newname"
      echo "lowercase: $file --> $newname"
    else
      echo "lowercase: $file not changed."
    fi
  done
}
#}}}

## SWAP 2 FILENAMES AROUND, IF THEY EXIST {{{
#(from Uzi's bashrc).
swap() {
  local TMPFILE=tmp.$$

  [[ $# -ne 2 ]] && echo "swap: 2 arguments needed" && return 1
  [[ ! -e $1 ]] && echo "swap: $1 does not exist" && return 1
  [[ ! -e $2 ]] && echo "swap: $2 does not exist" && return 1

  mv "$1" $TMPFILE
  mv "$2" "$1"
  mv $TMPFILE "$2"
}
#}}}

## FINDS DIRECTORY SIZES AND LISTS THEM FOR THE CURRENT DIRECTORY {{{
dirsize () {
  du -shx * .[a-zA-Z0-9_]* 2> /dev/null | egrep '^ *[0-9.]*[MG]' | sort -n > /tmp/list
  egrep '^ *[0-9.]*M' /tmp/list
  egrep '^ *[0-9.]*G' /tmp/list
  rm -rf /tmp/list
}
#}}}

## FIND AND REMOVED EMPTY DIRECTORIES {{{
fared() {
  read -p "Delete all empty folders recursively [y/N]: " OPT
  [[ $OPT == y ]] && find . -type d -empty -exec rm -fr {} \; &> /dev/null
}
#}}}

## FIND AND REMOVED ALL DOTFILES {{{
farad () {
  read -p "Delete all dotfiles recursively [y/N]: " OPT
  [[ $OPT == y ]] && find . -name '.*' -type f -exec rm -rf {} \;
}
#}}}
#}}}

# ENTER AND LIST DIRECTORY{{{
function cd() { builtin cd -- "$@" && { [ "$PS1" = "" ] || ls -hrt --color; }; }
#}}}

# SYSTEMD SUPPORT {{{
if which systemctl &>/dev/null; then
  start() {
    sudo systemctl start $1.service
  }
  restart() {
    sudo systemctl restart $1.service
  }
  stop() {
    sudo systemctl stop $1.service
  }
  enable() {
    sudo systemctl enable $1.service
  }
  status() {
    sudo systemctl status $1.service
  }
  disable() {
    sudo systemctl disable $1.service
  }
fi
#}}}

# MKDIR AND CD INTO NEW DIR{{{
mkcd() {
  if [ $# != 1 ]; then
    echo "Usage: mkcd <dir>"
  else
    mkdir -p $1 && cd $1
  fi
}
#}}}
#}}}
# No ttyctl, so we need to save and then restore terminal settings
vim()
{
  # osx users, use stty -g
  local STTYOPTS="$(stty --save)"
  stty stop '' -ixoff
  command vim "$@"
  stty "$STTYOPTS"
}

# Searches for text in all files in the current folder
ftext ()
{
	# -i case-insensitive
	# -I ignore binary files
	# -H causes filename to be printed
	# -r recursive search
	# -n causes line number to be printed
	# optional: -F treat search term as a literal, not a regular expression
	# optional: -l only print filenames and not the matching lines ex. grep -irl "$1" *
	grep -iIHrn --color=always "$1" . | less -r
}

# Copy file with a progress bar
cpp()
{
	set -e
	strace -q -ewrite cp -- "${1}" "${2}" 2>&1 \
	| awk '{
	count += $NF
	if (count % 10 == 0) {
		percent = count / total_size * 100
		printf "%3d%% [", percent
		for (i=0;i<=percent;i++)
			printf "="
			printf ">"
			for (i=percent;i<100;i++)
				printf " "
				printf "]\r"
			}
		}
	END { print "" }' total_size=$(stat -c '%s' "${1}") count=0
}

# Returns the last 2 fields of the working directory
pwdtail ()
{
	pwd|awk -F/ '{nlast = NF -1;print $nlast"/"$NF}'
}

# Show the current distribution
distribution ()
{
	local dtype
	# Assume unknown
	dtype="unknown"
	
	# First test against Fedora / RHEL / CentOS / generic Redhat derivative
	if [ -r /etc/rc.d/init.d/functions ]; then
		source /etc/rc.d/init.d/functions
		[ zz`type -t passed 2>/dev/null` == "zzfunction" ] && dtype="redhat"
	
	# Then test against SUSE (must be after Redhat,
	# I've seen rc.status on Ubuntu I think? TODO: Recheck that)
	elif [ -r /etc/rc.status ]; then
		source /etc/rc.status
		[ zz`type -t rc_reset 2>/dev/null` == "zzfunction" ] && dtype="suse"
	
	# Then test against Debian, Ubuntu and friends
	elif [ -r /lib/lsb/init-functions ]; then
		source /lib/lsb/init-functions
		[ zz`type -t log_begin_msg 2>/dev/null` == "zzfunction" ] && dtype="debian"
	
	# Then test against Gentoo
	elif [ -r /etc/init.d/functions.sh ]; then
		source /etc/init.d/functions.sh
		[ zz`type -t ebegin 2>/dev/null` == "zzfunction" ] && dtype="gentoo"
	
	# For Mandriva we currently just test if /etc/mandriva-release exists
	# and isn't empty (TODO: Find a better way :)
	elif [ -s /etc/mandriva-release ]; then
		dtype="mandriva"

	# For Slackware we currently just test if /etc/slackware-version exists
	elif [ -s /etc/slackware-version ]; then
		dtype="slackware"

	fi
	echo $dtype
}

# Show the current version of the operating system
ver ()
{
	local dtype
	dtype=$(distribution)

	if [ $dtype == "redhat" ]; then
		if [ -s /etc/redhat-release ]; then
			cat /etc/redhat-release && uname -a
		else
			cat /etc/issue && uname -a
		fi
	elif [ $dtype == "suse" ]; then
		cat /etc/SuSE-release
	elif [ $dtype == "debian" ]; then
		lsb_release -a
		# sudo cat /etc/issue && sudo cat /etc/issue.net && sudo cat /etc/lsb_release && sudo cat /etc/os-release # Linux Mint option 2
	elif [ $dtype == "gentoo" ]; then
		cat /etc/gentoo-release
	elif [ $dtype == "mandriva" ]; then
		cat /etc/mandriva-release
	elif [ $dtype == "slackware" ]; then
		cat /etc/slackware-version
	else
		if [ -s /etc/issue ]; then
			cat /etc/issue
		else
			echo "Error: Unknown distribution"
			exit 1
		fi
	fi
}

# Automatically install the needed support files for this .bashrc file
install_bashrc_support ()
{
	local dtype
	dtype=$(distribution)

	if [ $dtype == "redhat" ]; then
		sudo yum install multitail tree joe
	elif [ $dtype == "suse" ]; then
		sudo zypper install multitail
		sudo zypper install tree
		sudo zypper install joe
	elif [ $dtype == "debian" ]; then
		sudo apt-get install multitail tree joe
	elif [ $dtype == "gentoo" ]; then
		sudo emerge multitail
		sudo emerge tree
		sudo emerge joe
	elif [ $dtype == "mandriva" ]; then
		sudo urpmi multitail
		sudo urpmi tree
		sudo urpmi joe
	elif [ $dtype == "slackware" ]; then
		echo "No install support for Slackware"
	else
		echo "Unknown distribution"
	fi
}

#Show current network information
netinfo ()
{
	echo "--------------- Network Information ---------------"
	/sbin/ifconfig | awk /'inet addr/ {print $2}'
	echo ""
	/sbin/ifconfig | awk /'Bcast/ {print $3}'
	echo ""
	/sbin/ifconfig | awk /'inet addr/ {print $4}'

	/sbin/ifconfig | awk /'HWaddr/ {print $4,$5}'
	echo "---------------------------------------------------"
}

# IP address lookup
alias whatismyip="whatsmyip"
function whatsmyip ()
{
	# Dumps a list of all IP addresses for every device
	# /sbin/ifconfig |grep -B1 "inet addr" |awk '{ if ( $1 == "inet" ) { print $2 } else if ( $2 == "Link" ) { printf "%s:" ,$1 } }' |awk -F: '{ print $1 ": " $3 }';

	# Internal IP Lookup
	echo -n "Internal IP: " ; /sbin/ifconfig eth0 | grep "inet addr" | awk -F: '{print $2}' | awk '{print $1}'

	# External IP Lookup
	echo -n "External IP: " ; wget http://smart-ip.net/myip -O - -q
}

